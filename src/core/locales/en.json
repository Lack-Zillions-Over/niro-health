{
  "middlewares": {
    "authorization": {
      "exception": "API Key is invalid. Try again, later!"
    },
    "authorization-private-key": {
      "exception": "Private Key is invalid. Try again, later!"
    }
  },
  "users": {
    "repository": {
      "session_inactive": "Session is temporary inactive",
      "user_already_exists": "User with $1 \"$2\" is already exists",
      "user_not_exists": "User with $1 \"$2\" not found",
      "field_in_use": "$1 \"$2\" already in use",
      "password_incorrect": "Password is incorrect",
      "user_is_banned": "User with $1 \"$2\" is banned",
      "user_session_exceed_limit": "User with $1 \"$2\" exceed limit of $3 simultaneous connections",
      "user_session_ipAddress_not_allowed": "IP Address \"$1\" is not allowed by user",
      "user_session_ipAddress_is_blocked": "IP Address \"$1\" is blocked by user",
      "user_session_device_not_allowed": "Device \"$1\" is not allowed by user",
      "user_session_ipAddress_already_connected": "IP Address \"$1\" already connected session",
      "user_not_connected": "User with $1 \"$2\" is not connected",
      "session_canceled": "This session is canceled. Please connect again!",
      "session_geoip_not_equal_stored": "Your GEO Localization is changed. Please connect again!",
      "session_access_token_is_not_same_ip_address": "Session confirmed in other IP Address \"$1\"",
      "session_device_is_not_same_in_history": "Device \"$1\" is not found for this session",
      "session_token_revalidate_is_invalid": "Your revalidate token is invalid. Please reconnect!",
      "session_token_revalidate_ipAddress_is_not_stored": "IP Address \"$1\" is not equal ip stored for your revalidate token",
      "session_access_token_expired": "Session expired. Please reconnect!"
    }
  },
  "private-keys": {
    "repository": {
      "private_key_already_exists": "Private Key with $1 \"$2\" is already exists",
      "private_key_not_found": "Private Key with $1 \"$2\" not found",
      "invalid_secret": "Secret of key is invalid.",
      "field_in_use": "$1 \"$2\" already in use"
    }
  },
  "tests": {
    "users": {
      "usecases": {
        "create": {
          "describe": "UseCases -> Create user",
          "create_new_user": "Should create new user with valid data",
          "not_create_user_with_same_username": "Should not create user with same username",
          "not_create_user_with_same_email": "Should not create user with same email"
        },
        "find": {
          "id": {
            "describe": "UseCases -> Find By ID",
            "find_id_valid": "Should find user with valid id",
            "not_find_id_invalid": "Should not find user by id"
          },
          "username": {
            "describe": "UseCases -> Find By Username",
            "find_username_valid": "Should find user with valid username",
            "not_find_username_invalid": "Should not find user with invalid username"
          },
          "all": {
            "describe": "UseCases -> Find All Users",
            "find_all_users": "Should find all users"
          }
        },
        "update": {
          "describe": "UseCases -> Update user",
          "create_multiple_users": "Should create multiple users",
          "update_valid_user": "Should update user with valid data",
          "not_update_without_user": "Should not update user without register",
          "not_update_user_with_same_username": "Should not update user with same username"
        },
        "login": {
          "describe": "UseCases -> Login session",
          "create_new_user": "Should create a new user with valid data",
          "login_without_register": "Should user not login without register",
          "login_with_password_incorrect": "Should user not login user with password incorrect",
          "login_with_password_incorrect_several_times": "Should user not login user with password incorrect several times",
          "login_with_session_inactive": "Should user not login user with session inactive",
          "login_with_password_correct": "Should be login user with password correct",
          "login_user_in_same_ipAddress": "Should not login with user already connected in same ip address",
          "login_user_banned": "Should not login user banned",
          "login_with_device_not_allowed_by_user": "Should not login with device not allowed by user",
          "login_with_ipAddress_not_allowed_by_user": "Should not login with IP Address not allowed by user",
          "login_with_ipAddress_blocked_by_user": "Should not login with IP Address blocked by user"
        },
        "session-validate": {
          "describe": "UseCases -> Session validate",
          "validate_valid_session": "Should validate a valid session",
          "not_validate_session_with_invalid_username": "Should not validate a session with invalid username",
          "not_validate_session_with_invalid_token_value": "Should not validate a session with invalid value of token",
          "not_validate_session_with_invalid_token_signature": "Should not validate a session with invalid signature of token",
          "not_validate_session_with_invalid_token_revalidate_value": "Should not validate a session with invalid value of token revalidate",
          "not_validate_session_with_invalid_token_revalidate_signature": "Should not validate a session with invalid signature of token revalidate",
          "not_validate_session_with_geoip_not_same_stored": "Should not validate a session with geoip not same stored",
          "not_validate_session_with_device_not_same_stored": "Should not validate a session with device not same stored",
          "not_validate_session_with_token_revalidate_ipAddress_not_same_stored": "Should not validate a session with token revalidate IP Address not same stored",
          "not_validate_session_with_expired_token_revalidate": "Should not validate a session with expired token revalidate"
        },
        "logout": {
          "describe": "UseCases -> Logout session",
          "logout_valid_session": "Should logout a valid session",
          "not_logout_session_without_user": "Should not logout a session without user",
          "not_logout_session_not_connected": "Should not logout a session not connected"
        },
        "remove": {
          "describe": "UseCases -> Remove user",
          "not_remove_without_user": "Should not remove user without register",
          "remove_valid_user": "Should remove a valid user"
        }
      }
    },
    "private-keys": {
      "usecases": {
        "create": {
          "describe": "UseCases -> Create private keys",
          "create_new_key": "Should create new key with valid data",
          "create_new_key_same_tag": "Should not create new key with same tag"
        },
        "validate": {
          "describe": "UseCases -> Validate private keys",
          "validate_valid_key": "Should validate a valid key",
          "not_validate_key_with_invalid_tag": "Should not validate a key with invalid tag",
          "not_validate_key_with_invalid_secret": "Should not validate a key with invalid secret"
        },
        "update": {
          "describe": "UseCases -> Update private keys",
          "update_valid_key": "Should update a valid key",
          "not_update_key_without_register": "Should not update a key without register",
          "not_update_key_with_same_tag": "Should not update key with same tag"
        },
        "remove": {
          "describe": "UseCases -> Remove private keys",
          "remove_valid_key": "Should remove a valid key",
          "not_remove_key_without_register": "Should not remove a key without register"
        },
        "find": {
          "all": {
            "describe": "UseCases -> Find all private keys",
            "find_all_keys": "Should find all keys"
          },
          "tag": {
            "describe": "UseCases -> Find private keys by tag",
            "find_key_with_valid_tag": "Should find key with valid tag",
            "not_find_key_with_invalid_tag": "Should not find key with invalid tag"
          }
        }
      }
    }
  }
}
